{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","Views/RegisterView.module.css","Views/RegisterView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","RegisterView","useState","name","password","email","user","setUser","dispatch","useDispatch","handleChange","event","currentTarget","prev","className","styles","title","onSubmit","preventDefault","authOperations","userRegister","autoComplete","form","label","type","pattern","required","onChange","input","register"],"mappings":"8LAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,oBIJtGC,EAAOC,QAAU,CAAC,KAAO,2BAA2B,MAAQ,4BAA4B,MAAQ,4BAA4B,MAAQ,4BAA4B,SAAW,iC,4JCI5J,SAASC,IACtB,MAAwBC,mBAAS,CAAEC,KAAM,GAAIC,SAAU,GAAIC,MAAO,KAAlE,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAWC,cAEXC,EAAe,SAACC,GACpB,IAAIR,EAAOQ,EAAMC,cAAcT,KAC3BT,EAAQiB,EAAMC,cAAclB,MAChCa,GAAQ,SAACM,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBV,EAAOT,QAexC,OACE,qCACE,mBAAGoB,UAAWC,IAAOC,MAArB,sBAEA,uBAAMC,SAhBW,SAACN,GACpBA,EAAMO,iBACNV,EACEW,IAAeC,aAAa,CAC1BjB,KAAMG,EAAKH,KACXE,MAAOC,EAAKD,MACZD,SAAUE,EAAKF,YAInBG,EAAQ,CAAEJ,KAAM,GAAIC,SAAU,GAAIC,MAAO,MAMTgB,aAAa,MAAMP,UAAWC,IAAOO,KAAnE,UACE,wBAAOR,UAAWC,IAAOQ,MAAzB,iBAEE,uBACEC,KAAK,OACLrB,KAAK,OACLsB,QAAQ,yHACRT,MAAM,kcACNU,UAAQ,EACRhC,MAAOY,EAAKH,KACZwB,SAAUjB,EACVI,UAAWC,IAAOa,WAGtB,wBAAOd,UAAWC,IAAOQ,MAAzB,kBAEE,uBACEC,KAAK,QACLrB,KAAK,QACLuB,UAAQ,EACRhC,MAAOY,EAAKD,MACZsB,SAAUjB,EACVI,UAAWC,IAAOa,WAGtB,wBAAOd,UAAWC,IAAOQ,MAAzB,qBAEE,uBACEC,KAAK,WACLrB,KAAK,WACLuB,UAAQ,EACRhC,MAAOY,EAAKF,SACZuB,SAAUjB,EACVI,UAAWC,IAAOa,WAGtB,wBAAQJ,KAAK,SAASV,UAAWC,IAAOc,SAAxC","file":"static/js/register.c3a6449f.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"RegisterView_form__3KUlo\",\"title\":\"RegisterView_title__3te5Z\",\"label\":\"RegisterView_label__1TkRG\",\"input\":\"RegisterView_input__2iHyN\",\"register\":\"RegisterView_register__2pjFi\"};","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport authOperations from \"../Redux/Authentification/auth-operations\";\nimport styles from \"./RegisterView.module.css\";\n\nexport default function RegisterView() {\n  const [user, setUser] = useState({ name: \"\", password: \"\", email: \"\" });\n\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    let name = event.currentTarget.name;\n    let value = event.currentTarget.value;\n    setUser((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    dispatch(\n      authOperations.userRegister({\n        name: user.name,\n        email: user.email,\n        password: user.password,\n      })\n    );\n\n    setUser({ name: \"\", password: \"\", email: \"\" });\n  };\n  return (\n    <>\n      <p className={styles.title}>Register</p>\n\n      <form onSubmit={handleSubmit} autoComplete=\"off\" className={styles.form}>\n        <label className={styles.label}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={user.name}\n            onChange={handleChange}\n            className={styles.input}\n          />\n        </label>\n        <label className={styles.label}>\n          Email\n          <input\n            type=\"email\"\n            name=\"email\"\n            required\n            value={user.email}\n            onChange={handleChange}\n            className={styles.input}\n          />\n        </label>\n        <label className={styles.label}>\n          Password\n          <input\n            type=\"password\"\n            name=\"password\"\n            required\n            value={user.password}\n            onChange={handleChange}\n            className={styles.input}\n          />\n        </label>\n        <button type=\"submit\" className={styles.register}>\n          Register\n        </button>\n      </form>\n    </>\n  );\n}\n"],"sourceRoot":""}